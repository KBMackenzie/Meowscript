-- std.meows

~( ^.x.^)> --------------
  Arithmetic operations
-------------- <(^.x.^ )~

mew add = ( ^.x.^)> (a, b) => (a + b)
mew sub = ( ^.x.^)> (a, b) => (a - b)
mew mul = ( ^.x.^)> (a, b) => (a * b)
mew div = ( ^.x.^)> (a, b) => (a / b)
mew mod = ( ^.x.^)> (a, b) => (a % b)

mew pow = ( ^.x.^)> (a, b) => (a ^ b)
mew sqr = ( ^.x.^)> (a) => (a ^ 2)

mew min = ( ^.x.^)> (a, b) => (a < b ? a : b)
mew max = ( ^.x.^)> (a, b) => (a > b ? a : b)

mew intdiv = ( ^.x.^)> (a, b) => (floor(a / b))


~( ^.x.^)> ---------------
     Other Operations
--------------- <(^.x.^ )~

mew join   = ( ^.x.^)> (a, b) => (a..b)
mew length = ( ^.x.^)> (a) => (a?!)

mew equal          = ( ^.x.^)> (a, b) => (a == b)
mew lesser         = ( ^.x.^)> (a, b) => (a < b)
mew greater        = ( ^.x.^)> (a, b) => (a > b)
mew lesser_equal   = ( ^.x.^)> (a, b) => (a <= b)
mew greater_equal  = ( ^.x.^)> (a, b) => (a >= b)
mew not_equal      = ( ^.x.^)> (a, b) => (a != b)


~( ^.x.^)>
Inspired by Haskell's 'id' and 'const' functions.
(The const function would be flipped.)

The 'mirror' function doubles as a shallow-copying
function, too!
<(^.x.^ )~

mew mirror = ( ^.x.^)> (a) => (a)
mew bounce = ( ^.x.^)> (a, b) => (b)



~( ^.x.^)> -----------
    Random numbers
----------- <(^.x.^ )~

~( ^.x.^)>
Random function helpers.
Based heavily on these solutions:
https://stackoverflow.com/a/1527820
<(^.x.^ )~

-- Random float in range [min, max)
=^.x.^= random_range(min, max)
    bring random() * (max - min) + min
meow meow

-- Random float in range [0, num)
=^.x.^= random_until(num)
    bring random() * num
meow meow

-- Random int in range [min, max]
=^.x.^= random_int(min, max)
    bring floor(random() * (max - min + 1)) + min
meow meow




~( ^.x.^)> --------------
  Stack/shelf functions
-------------- <(^.x.^ )~

~( ^.x.^)>
Map implementation.
Callback function should take one argument.
<(^.x.^ )~

=^.x.^= map (shelf, fn)
    mew output = []
    meowmeow (shelf)
        fn(peek shelf) push output
        knock over shelf
    meow meow
    bring reverse(output) -- Reverse because stack.
meow meow


~( ^.x.^)>
Foldl implementation.
Callback function should take two arguments!
<(^.x.^ )~

=^.x.^= fold (shelf, fn, init)
    mew output = init
    meowmeow (shelf)
        output = fn(output, peek shelf)
        knock over shelf
    meow meow
    bring output
meow meow


~( ^.x.^)>
Filter implementation.
Callback should take one argument.
<(^.x.^ )~

=^.x.^= filter (shelf, fn)
    mew output = []
    meowmeow (shelf)
        mew item = peek shelf
        mew? (fn(item))
            item push output
        meow meow
        knock over shelf
    meow meow
    bring reverse(output) -- Reversing because stack.
meow meow


~( ^.x.^)>
'Contains' function.
Checks if an item exists in the shelf.
<(^.x.^ )~

=^.x.^= contains (shelf, item)
    meowmeow (shelf)
        mew? (peek shelf == item)
            bring happy
        meow meow
        knock over shelf
    meow meow
    bring sad
meow meow


~( ^.x.^)>
'Any' function.
Checks if any item in the shelf satisfies a condition.
<(^.x.^ )~

=^.x.^= any (shelf, fn)
    meowmeow (shelf)
        mew? (fn(peek shelf))
            bring happy
        meow meow
        knock over shelf
    meow meow
    bring sad
meow meow


~( ^.x.^)>
'All' function.
Checks if all items in the shelf satisfy a condition.
<(^.x.^ )~

=^.x.^= all (shelf, fn)
    meowmeow (shelf)
        mew? (not fn(peek shelf))
            bring sad
        meow meow
        knock over shelf
    meow meow
    bring happy
meow meow


~( ^.x.^)> -------------------------
  Additional stack/shelf functions
------------------------- <(^.x.^ )~

~( ^.x.^)>
Indexing function implementation.
It's O(n) and highly discouraged, because shelves!

Note this function does not throw exceptions when an
index goes out of bounds, because of how
knocking over items from shelves works in Meowscript.
It returns 'lonely' instead.
<(^.x.^ )~

=^.x.^= index (shelf, num)
    take (mew i = 0) and do (paw at i) while (i < num)
        knock over shelf
    meow meow 
    bring peek shelf
meow meow


~( ^.x.^)>
'Take' function implementation.
Takes n items from a shelf and returns a list of items.
<(^.x.^ )~

=^.x.^= take_n (shelf, n)
    mew output = []
    take (mew i = 0) and do (paw at i) while (i < n)
        (peek shelf) push output
        knock over shelf
    meow meow
    bring reverse(output) -- Reversing because stack.
meow meow


~( ^.x.^)>
'Drop' function implementation.
Drops n items from a shself and returns the shelf.
<(^.x.^ )~

=^.x.^= drop_n (shelf, n)
    mew output = []
    take (mew i = 0) and do (paw at i) while (i < n)
        knock over shelf
    meow meow
    bring shelf
meow meow


~( ^.x.^)>
'Take while' function implementation.
Takes items while the top of the shelf satisfies the predicate.
<(^.x.^ )~

=^.x.^= take_while (shelf, fn)
    mew output = []
    meowmeow (fn(peek shelf))
        (peek shelf) push output
        knock over shelf
    meow meow
    bring reverse(output) -- Reversing because stack.
meow meow


~( ^.x.^)>
'Drop while' function implementation.
Drops items while the top of the shelf satisfies the predicate.
<(^.x.^ )~

=^.x.^= drop_while (shelf, fn)
    meowmeow (fn(peek shelf))
        knock over shelf
    meow meow
    bring shelf
meow meow




~( ^.x.^)> -----------
   String functions
----------- <(^.x.^ )~

=^.x.^= is_empty(x)
    bring nuzzle(x)
meow meow

=^.x.^= split_at(str, n)
    mew a = substring(str, 0, n)
    mew b = substring(str, n, str?! - n)
    bring [a, b]
meow meow

=^.x.^= starts_with(str, prefix)
    bring substring(str, 0, prefix?!) == prefix
meow meow

=^.x.^= ends_with(str, suffix)
    mew len = suffix?!
    bring substring(str, str?! - len, len) == suffix
meow meow



~( ^.x.^)> -----------
       Highshelf       
----------- <(^.x.^ )~

~( ^.x.^)> 
For query-like operations on lists.
A few examples of its usage:

number_list                                     \
    .where(( ^.x.^)> (x) => (x > 10))           \
    .first()

string_list                                     \
    .where(( ^.x.^)> (x) => (not is_empty(x)))  \
    .choose(10)

The highshelf tries to make query-like operations
work within Meowscript's set of limitations!

It isn't lazy. however.
It also modifies the box itself.
<(^.x.^ )~

=^.x.^= highshelf(items)
    bring ~( ^.x.^) BOX!! [
        items: items,
        length: ( ^.x.^)> ()   => (home.items?!),
        add:    ( ^.x.^)> (a)  => (bounce(a push home.items, home)),
        choose: ( ^.x.^)> (n)  => (take_n(home.items, n)),
        where:  ( ^.x.^)> (fn) => (bounce(home.items = filter(home.items, fn), home)),
        first:  ( ^.x.^)> ()   => (peek home.items),
        last:   ( ^.x.^)> ()   => (peek reverse(home.items)),
        shelf:  ( ^.x.^)> ()   => (home.items)
    ]
meow meow



~( ^.x.^)> ---------------------
  Partial function application
--------------------- <(^.x.^ )~

~( ^.x.^)>
Flip a function's arguments.
Accepts only (a -> b -> c) functions.
<(^.x.^ )~

=^.x.^= flip (fn)
    bring ( ^.x.^)> (a, b) => (fn(b, a))
meow meow


~( ^.x.^)>
Partial function application. Returns a function.
Takes an (a -> b -> c) function and makes it a (b -> c).
<(^.x.^ )~

=^.x.^= poke (fn, a)
    bring ( ^.x.^)> (b) => (fn(a, b))
meow meow

~( ^.x.^)>
Partial function application. Returns a function.
Takes an (a -> b -> c -> d) function and makes it (b -> c -> d).
<(^.x.^ )~

=^.x.^= poke2 (fn, a)
    bring ( ^.x.^)> (b, c) => (fn(a, b, c))
meow meow

~( ^.x.^)>
Partial function application. Returns a function.
Takes an (a -> b -> c -> d -> e) function and amkes it (b -> c -> d -> e).
<(^.x.^ )~

=^.x.^= poke3 (fn, a)
    bring ( ^.x.^)> (b, c, d) => (fn(a, b, c, d))
meow meow
